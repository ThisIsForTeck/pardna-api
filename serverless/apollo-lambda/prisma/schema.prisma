datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

enum Role {
  USER
  ADMIN
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum PaymentType {
  PAYOUT
  CONTRIBUTION
  BANKERFEE
}

enum PeriodType {
  DAY
  WEEK
  MONTH
}

model User {
  id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  pardna    Pardna?
  payment   Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Participant {
  id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  pardna    Pardna?   @relation(fields: [pardnaId], references: [id], onDelete: Cascade)
  pardnaId  String?   @db.ObjectId
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("participants")
}

model Pardna {
  id                 String        @id @default(dbgenerated()) @map("_id") @db.ObjectId
  name               String?
  banker             User          @relation(fields: [userId], references: [id])
  userId             String        @unique @db.ObjectId
  bankerFee          Float         @default(10) // %
  participants       Participant[] // TODO: max 6
  contributionAmount Int           @default(1000) // lowest denomination e.g pennies. // TODO: max Â£50
  ledger             Ledger?
  startDate          DateTime
  duration           Int           @default(12) // number of months
  // potAmount - should be calculated field
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@map("pardnas")
}

model Payment {
  id            String       @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type          PaymentType
  dueDate       DateTime     @default(now())
  settled       Boolean      @default(false)
  settledDate   DateTime?
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?      @db.ObjectId
  participant   Participant? @relation(fields: [participantId], references: [id])
  participantId String?      @db.ObjectId
  period        Period?      @relation(fields: [periodId], references: [id], onDelete: Cascade)
  periodId      String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("payments")
}

model Period {
  id        String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  type      PeriodType
  number    Int
  payments  Payment[] // TODO: somehow autogenerate all future payment records based on participants and update even when they change etc
  ledger    Ledger     @relation(fields: [ledgerId], references: [id], onDelete: Cascade)
  ledgerId  String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("periods")
}

model Ledger {
  id               String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  paymentFrequency Frequency @default(MONTHLY)
  periods          Period[]
  pardna           Pardna    @relation(fields: [pardnaId], references: [id], onDelete: Cascade)
  pardnaId         String    @unique @db.ObjectId
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("ledgers")
}
